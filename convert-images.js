const fs = require("fs-extra");
const path = require("path");
const matter = require("gray-matter");

const dir = path.join(__dirname, "anunci");

(async () => {
  const files = await fs.readdir(dir);
  const mdFiles = files.filter(file => file.endsWith(".md"));

  for (const file of mdFiles) {
    const filePath = path.join(dir, file);
    const content = await fs.readFile(filePath, "utf-8");
    const parsed = matter(content);

    const { data, content: body } = parsed;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (
      Array.isArray(data.images) &&
      data.images.length &&
      typeof data.images[0] === "string"
    ) {
      data.images = data.images.map(src => ({ src, alt: "" }));

      const newFile = matter.stringify(body, data);
      await fs.writeFile(filePath, newFile, "utf-8");
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω: ${file}`);
    } else {
      console.log(`‚è© –ü—Ä–æ–ø—É—â–µ–Ω (—É–∂–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –ø—É—Å—Ç–æ): ${file}`);
    }
  }

  console.log("üéâ –í—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
})();
